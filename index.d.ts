
declare module "jest-fuzz" {
	/**
	 * FuzzGenerator: a function which produces a new random output each time it is invoked.
	 */
	export type FuzzGenerator<T> = () => T;

	/**
	 * The type of jasmine/jest compatible tests which can consume a generated fuzzer input.
	 */
	export type FuzzTestRunner<T> = ((fuzzData: T) => void) | ((fuzzData: T) => Promise<any>);

	/**
	 * `jest-fuzz::test()` is analogous to `jest::describe()`; it declares a parameterized test, and then runs a number of individual fuzzings on that parameter set.
	 * @param name 
	 * @param fuzzer 
	 * @param testRunner 
	 */
	export function test<T>(name: string, fuzzer: FuzzGenerator<T>, testRunner: FuzzTestRunner<T>): void;

	/**
	 * The type of random number generators.
	 */
	type RNGSource = { random: () => number };

	/**
	 * Wrapper function for injecting a specified RNG source and options into a generator.
	 */
	export function Fuzzer<O, T>(generator: ((random: RNGSource) => ((options: O) => FuzzGenerator<T>))): ((options: O) => FuzzGenerator<T>);

	/**
	 * Wrapper function for creating a fuzz generator for an arbitrary object structure.
	 */
	export function Fuzzer<T extends {}>(template: T): FuzzGenerator<{ [K in keyof T]: T[K] extends FuzzGenerator<infer V> ? V : never }>;

	/**
	 * Generator for random alphanumeric strings. These are always of the specified length, and can have a specific prefix or suffix for each.
	 */
	export function string(options?: {
		length?: number = 125,
		sufix?: string = '',
		prefix?: string = '',
	}): FuzzGenerator<string>;

	/**
	 * Generator for random integral values (within the full range of floating-point representation).
	 */
	export function int(options?: {
		max: number = Infinity,
		min: number = -Infinity,
	}): FuzzGenerator<Number>;

	/**
	 * Generator for random floating-point values.
	 */
	export function float(options?: {
		max: number = Infinity,
		min: number = -Infinity,
	}): FuzzGenerator<Number>;

	/**
	 * Generator for random boolean values.
	 */
	export function bool(): FuzzGenerator<boolean>;

	/**
	 * Helper structure for declaring a tuple of N items of a consistent element type.
	 */
	type Tuple<T, N extends number> = N extends N ? number extends N ? T[] : _TupleOf<T, N, []> : never;
	type _TupleOf<T, N extends number, R extends unknown[]> = R['length'] extends N ? R : _TupleOf<T, N, [T, ...R]>;

	/**
	 * Generator for arrays of a constant length, interpreted as Typescript tuples. This only works with literals, not duplicate expressions, since arbitrary expressions can have arbitrary side-effects.
	 */
	export function array<V, L extends number>(options: {
		type?: FuzzGenerator<V> = int(),
		length: L,
		minLength: L,
	}): FuzzGenerator<Tuple<V, L>>;

	/**
	 * Generator for an array. Produces arrays of random length between the bounds requested (1-300 inclusive by default), filled with elements of the specified type (as generated by `int()` by default).
	 */
	export function array<V>(options?: {
		type?: FuzzGenerator<V> = int(),
		length?: number = 300,
		minLength?: number = 1,
	}): FuzzGenerator<V[]>;
};
